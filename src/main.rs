mod jam;

use chrono::{DateTime, Local};
use clap::Parser;
use std::fs;

const VERSION: &str = env!("CARGO_PKG_VERSION");
const API_URL: &str = "https://www.archlinux.org/mirrors/status/json";

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args = jam::Args::parse();

    let res = reqwest::get(API_URL)
        .await?
        .json::<jam::ApiResponse>()
        .await?;
    let mirrors = jam::process_mirrors(res, &args);

    let urls = mirrors
        .into_iter()
        .enumerate()
        .map(|(i, m)| {
            if i < args.maximum_mirrors.unwrap_or(10) {
                format!("Server = {}$repo/os/$arch", m.url)
            } else {
                format!("#Server = {}$repo/os/$arch", m.url)
            }
        })
        .collect::<Vec<_>>()
        .join("\n");

    if let Some(output_path) = args.output {
        let current_time: DateTime<Local> = Local::now();
        let header = format!(
            "##\n## Generated by jam {}\n## Last updated {}\n##\n",
            VERSION,
            current_time.format("%Y-%m-%d")
        );

        fs::write(output_path, format!("{}\n{}", header, urls))
            .expect("Unable to write to given file");
    } else {
        println!("{}", urls)
    }

    Ok(())
}
